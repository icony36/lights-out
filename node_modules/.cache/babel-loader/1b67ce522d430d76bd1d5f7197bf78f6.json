{"ast":null,"code":"import _slicedToArray from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/iantan/Desktop/Exercise/Advance/React/lights-out/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // flip this cell and the cells around it\n\n\n      flipCell(y, x); //Flip initial cell\n\n      flipCell(y, x - 1); //Flip left\n\n      flipCell(y, x + 1); //Flip right\n\n      flipCell(y - 1, x); //Flip below\n\n      flipCell(y + 1, x); //Flip above\n      // win when every cell is turned off\n      // determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, row));\n      }\n\n      return this.state.hasWon ? React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"YOU\"), React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"WON\"))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Lights\"), React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Out\")), React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, tBoard))); // if the game is won, just show a winning msg & render nothing else\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/iantan/Desktop/Exercise/Advance/React/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n    static defaultProps = {\n        nrows: 5,\n        ncols: 5,\n        chanceLightStartsOn: 0.25\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasWon: false,\n            board: this.createBoard()\n        };\n\n        // set initial state\n    }\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n    createBoard() {\n        let board = [];\n        // create array-of-arrays of true/false values\n        for (let y = 0; y < this.props.nrows; y++) {\n            let row = [];\n            for (let x = 0; x < this.props.ncols; x++) {\n                row.push(Math.random() < this.props.chanceLightStartsOn);\n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    /** handle changing a cell: update board & determine if winner */\n\n    flipCellsAround(coord) {\n        let { ncols, nrows } = this.props;\n        let board = this.state.board;\n        let [y, x] = coord.split(\"-\").map(Number);\n\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n\n        // flip this cell and the cells around it\n        flipCell(y, x); //Flip initial cell\n        flipCell(y, x - 1); //Flip left\n        flipCell(y, x + 1); //Flip right\n        flipCell(y - 1, x); //Flip below\n        flipCell(y + 1, x); //Flip above\n\n        // win when every cell is turned off\n        // determine is the game has been won\n        let hasWon = board.every(row => row.every(cell => !cell));\n        this.setState({ board: board, hasWon: hasWon });\n    }\n\n    /** Render game board or winning message. */\n\n    render() {\n        let tBoard = [];\n        for (let y = 0; y < this.props.nrows; y++) {\n            let row = [];\n            for (let x = 0; x < this.props.ncols; x++) {\n                let coord = `${y}-${x}`;\n                row.push(\n                    <Cell\n                        key={coord}\n                        isLit={this.state.board[y][x]}\n                        flipCellsAroundMe={() => this.flipCellsAround(coord)}\n                    />\n                );\n            }\n            tBoard.push(<tr key={y}>{row}</tr>);\n        }\n        return this.state.hasWon ? (\n            <div className=\"Board-title\">\n                <div className=\"winner\">\n                    <span className=\"neon-orange\">YOU</span>\n                    <span className=\"neon-blue\">WON</span>\n                </div>\n            </div>\n        ) : (\n            <div>\n                <div className=\"Board-title\">\n                    <div className=\"neon-orange\">Lights</div>\n                    <div className=\"neon-blue\">Out</div>\n                </div>\n\n                <table className=\"Board\">\n                    <tbody>{tBoard}</tbody>\n                </table>\n            </div>\n        );\n        // if the game is won, just show a winning msg & render nothing else\n    }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}